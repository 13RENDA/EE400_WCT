# Demo system manager

import AudioHandler as ah
import AudioTextTransformer as att
import DialogEngine as de
import KeyboardActionListener as kal

# audio input device index--> use "ffmpeg -f avfoundation -list_devices true -i" command
#                             in linux terminal to get indices associate AV IO devices
#                             spice input withh ":<index number>"
system_audio_in_index = ":1"
deepspeech_model_filename = ""
deepspeech_scorer_filename = ""
audio_in_file_name = "request.wav"
audio_out_file_name = "response.wav"

# set up system objects
dialog = de.DialogEngine("DemoResponses.csv", "DemoSynonyms.csv")
audio = ah.AudioHandler(system_audio_in_index)
a2t = att.AudioTextTransformer()

# function to set program quit condition
quit = 0
def quit_program():
  print("Quitting program")
  quit = 1
  
# MAIN SYSTEM RESPONSE LOGIC  
# function to respond to request upon releasing space bar
def process_request():
  input_audio_file = audio.stop_recording()
  request = a2t.audio2text(input_audio_file)
  text_response, action = dialog.response(request)
  
  # if request not understood
  if (text_response == "unkn"):
    # TODO change print statement to MozillaTTL function to generate audio, and then call "audio.play_audio()"
    print("I'm sorry, I didn't understand you. Let's try again. How can I help you?")
  
  # response generated with no follow on action necessary
  elif (action == 0):
    # TODO change print statement to MozillaTTL function to generate audio, and then call "audio.play_audio()"
    print(text_response)
    
  # response generated with request for sensor info
  elif (action == 1):
    # TODO call function to get chair availability and generate a text string with available room 
    # TODO change print statement to MozillaTTL function to generate audio, and then call "audio.play_audio()"
    print(text_response)

  # response generated with request of information for specific room 
  elif (action == 2):
    # TODO write functon (in seperate file) to parse a string of words for a numerical room number
    # TODO write a function query a dictionary with the room number and output a room amenity description
    # TODO change print statement to MozillaTTL function to generate audio, and then call "audio.play_audio()"
    print(text_response)

  # response generated with request for car-guide
  elif (action == 3):
    # TODO write functon (in seperate file) to parse a string of words for a numerical room number
    # TODO write a function query a dictionary with the room number and output a room keyvalue (limit to 0-2 for demo)
    # TODO write a class to handle room keyvalue transmission over TCP/IP to ESP8266 Module on car
    # TODO change print statement to MozillaTTL function to generate audio, and then call "audio.play_audio()"
    print(text_response)
  
# KEYBOARD INPUT LISTENER  
# pressing 'space' starts recording
# releasing 'space' stops recording
# pressing 'q' set program quit condition
# access audio file generated by releasing 'space' with "keylistener.stop_output"
keylistener = kal.KeyActionListener(audio.start_recording(audio_in_file_name),
                                    process_request(),
                                    quit_program())

# MAIN LOOP
while (quit == 0):
  keylistener.start()
  print("Hold down 'space' to record input\n\n(press q to quit)\n")
  keylistener.join()